# Application name
spring.application.name=orders-service
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root

# Enable SQL logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Use 'update' instead of 'create-drop'
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

spring.sql.init.mode=always
spring.sql.init.continue-on-error=true
logging.level.org.springframework.jdbc.datasource.init=DEBUG

spring.cloud.discovery.enabled=true
server.port=0


# Custom property for a 3-digit random number
app.instance-id=${spring.application.name}:${random.int[100,999]}

# Use the custom instance ID
eureka.instance.instance-id=${app.instance-id}

eureka.instance.prefer-ip-address=true


# Eureka client configuration
#Below configuration endpoint is without username and password. used when discovery-service itself is not on spring security
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

#Below configuration is after making the discovery-service on spring security. credentials are hardocded here as well in discovery-service
eureka.client.service-url.defaultZone=http://eureka:eureka@localhost:8761/eureka/


#Health checks
management.health.circuitbreakers.enabled=true
management.health.resilience4j.circuitbreaker.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.show-details=always
management.endpoint.health.show-details=always

# Resiliency Properties
# Resiliency Properties

# Enables health indicator registration for the CircuitBreaker instance (exposes health metrics).
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

# Sets the buffer size for storing CircuitBreaker events (e.g., state transitions, failures).
resilience4j.circuitbreaker.instances.inventory.eventConsumerBufferSize=10

# Defines the number of calls tracked in the sliding window for failure rate calculation.
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=3

# Specifies the type of sliding window (COUNT_BASED tracks last N calls, TIME_BASED tracks calls in a time frame).
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED

# Sets the failure rate threshold (in percentage) beyond which the CircuitBreaker trips open.
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=100

# Defines the wait duration in the OPEN state before transitioning to HALF_OPEN.
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5m

# Sets the number of permitted calls in the HALF_OPEN state to test if the system has recovered.
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=1

# Enables automatic transition from OPEN to HALF_OPEN state after the wait duration.
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

# Sets the minimum number of calls required to calculate the failure rate.
resilience4j.circuitbreaker.instances.inventory.minimumNumberOfCalls=3

#Important : Create a database in mysql : "create database order_service;"